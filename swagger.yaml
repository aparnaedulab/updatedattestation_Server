openapi: 3.0.0
info:
  title: "Attestation API"
  version: "16.18.0"
  description: "Attestation API to manage information"

  servers:
  - url: http://localhost:5000/api
    description: Development server

    # create route document for user/LoginUser routes
paths:
# Register New User 
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      description: "Creates a new user with the provided data"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    userName:
                      type: string
                      example: "Shubham"
                    Surname:
                      type: string
                      example: "Ravrane"
                    Gender:
                      type: string
                      example: "Male"
                    userEmail:
                      type: string
                      format: email
                      example: "Shubhamr@edulab.in"
                    userPassword:
                      type: string
                      example: "qwerty@143"
                    userContactNo:
                      type: string
                      format: int64
                      example: "9867168171"
                    mobile_country_code:
                      type: integer
                      example: "91"
                    whatsapp_No:
                      type: string
                      example: "null"
                    captcha:
                      type: string
                      example: "II04"
      responses:
        '400':
          description: Email already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: "string"
                    example: "400"
                  message:
                    type: "string"
                    example: "Email already exists."
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: "string"
                    example: "200"
                  data:
                    type: "object"
                    example: User created successfully

# create route document for user/LoginUser routes
  /api/student/login:
    post:
      tags:
        - auth
      summary: Login a User       
      description: Login a user with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                  email:
                    type: string
                    format: email
                    example: "shubhamr@edulab.in"
                  password:
                      type: string
                      example: "123456"
      responses:
        '200':
          description: Successfully logged in!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: "string"
                    example: "200"
                  data:
                    type: "object"
                    properties:
                      message:
                        type: "string"
                        example: Successfully logged in!
                      token:
                        type: "string"
                        example: token
        '401':
          description: Email and password both are required!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: "string"
                    example: "401"
                  data:
                    type: "object"
                    properties:
                      errors:
                        type: "string"
                        example: error Messages

#logout route document
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logout from the Application       
      description: Logout the current user from the application
      responses:
       '200':
        description: Success message
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                     message:
                        type: string
                        example: Successfully logged out!
 
# route document for user/Reset Password 
  /auth/resetpassword:
    post:
      tags:
        - auth
      summary: Reset Password
      security:
        - bearerAuth: []       
      description: user can there old password to Reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    userPassword: 
                      type: "string"
                      example: "123456"
                    userConfirmPassword: 
                      type: "string"
                      example: "123456"
                    email:
                      type: "string"
                      example: "akashmourya@edulab.in"
      responses:
        '200':
          description: Successfully logged in!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: "string"
                    example: "200"
                  data:
                    type: "object"
                    example: body_data
                  message:
                      type: "string"
                      example: Password Reset successfully
        '401':
          description: Email and password both are required!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: "string"
                    example: "401"
                  message:
                      type: "string"
                      example: Something went wrong while changing your Password

#Update First form data
  /api/student/educationalDetails:
    post:
      tags:
        - Students
      summary: Update First Step Detail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                formdata:
                  type: object
                  properties:
                    educationalDetails:
                      type: "BOOLEAN"
                      example: "true"
                    instructionalDetails:
                      type: "BOOLEAN"
                      example: "false"
                    curriculumDetails:
                      type: "BOOLEAN"
                      example: "false"
                    gradToPer:
                      type: "BOOLEAN"
                      example: "false"
                    affiliation:
                      type: "BOOLEAN"
                      example: "false" 
                    CompetencyLetter:
                      type: "BOOLEAN"
                      example: "false"
                    LetterforNameChange:
                      type: "BOOLEAN"
                      example: "false"          
      responses:
        '200':
          description: update first form data successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: "string"
                    example: "200"
                  data:
                    type: "string"
                    example: "userUpdated"
        '400':
          description: data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: "string"
                    example: "400"
                  message:
                    type: "string"
                    example: user does not exist!!!..











